# coding: utf-8

"""
    timelight

    This is the timelight api.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from timelight-ai-python-api-client.models.create_source_day_dto import CreateSourceDayDto  # noqa: F401,E501


class CreateSourceDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'reference_year': 'float',
        'latitude': 'float',
        'longitude': 'float',
        'address': 'str',
        'days': 'list[CreateSourceDayDto]'
    }

    attribute_map = {
        'name': 'name',
        'reference_year': 'referenceYear',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'address': 'address',
        'days': 'days'
    }

    def __init__(self, name=None, reference_year=None, latitude=None, longitude=None, address=None, days=None):  # noqa: E501
        """CreateSourceDto - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._reference_year = None
        self._latitude = None
        self._longitude = None
        self._address = None
        self._days = None
        self.discriminator = None

        self.name = name
        self.reference_year = reference_year
        self.latitude = latitude
        self.longitude = longitude
        self.address = address
        self.days = days

    @property
    def name(self):
        """Gets the name of this CreateSourceDto.  # noqa: E501

        The source name, between 2 and 100 characters  # noqa: E501

        :return: The name of this CreateSourceDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateSourceDto.

        The source name, between 2 and 100 characters  # noqa: E501

        :param name: The name of this CreateSourceDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def reference_year(self):
        """Gets the reference_year of this CreateSourceDto.  # noqa: E501

        The source reference year, used to train our models  # noqa: E501

        :return: The reference_year of this CreateSourceDto.  # noqa: E501
        :rtype: float
        """
        return self._reference_year

    @reference_year.setter
    def reference_year(self, reference_year):
        """Sets the reference_year of this CreateSourceDto.

        The source reference year, used to train our models  # noqa: E501

        :param reference_year: The reference_year of this CreateSourceDto.  # noqa: E501
        :type: float
        """
        if reference_year is None:
            raise ValueError("Invalid value for `reference_year`, must not be `None`")  # noqa: E501

        self._reference_year = reference_year

    @property
    def latitude(self):
        """Gets the latitude of this CreateSourceDto.  # noqa: E501

        The source latitude  # noqa: E501

        :return: The latitude of this CreateSourceDto.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this CreateSourceDto.

        The source latitude  # noqa: E501

        :param latitude: The latitude of this CreateSourceDto.  # noqa: E501
        :type: float
        """
        if latitude is None:
            raise ValueError("Invalid value for `latitude`, must not be `None`")  # noqa: E501

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this CreateSourceDto.  # noqa: E501

        The source longitude  # noqa: E501

        :return: The longitude of this CreateSourceDto.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this CreateSourceDto.

        The source longitude  # noqa: E501

        :param longitude: The longitude of this CreateSourceDto.  # noqa: E501
        :type: float
        """
        if longitude is None:
            raise ValueError("Invalid value for `longitude`, must not be `None`")  # noqa: E501

        self._longitude = longitude

    @property
    def address(self):
        """Gets the address of this CreateSourceDto.  # noqa: E501

        The source physical address  # noqa: E501

        :return: The address of this CreateSourceDto.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CreateSourceDto.

        The source physical address  # noqa: E501

        :param address: The address of this CreateSourceDto.  # noqa: E501
        :type: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def days(self):
        """Gets the days of this CreateSourceDto.  # noqa: E501

        List of day data  # noqa: E501

        :return: The days of this CreateSourceDto.  # noqa: E501
        :rtype: list[CreateSourceDayDto]
        """
        return self._days

    @days.setter
    def days(self, days):
        """Sets the days of this CreateSourceDto.

        List of day data  # noqa: E501

        :param days: The days of this CreateSourceDto.  # noqa: E501
        :type: list[CreateSourceDayDto]
        """
        if days is None:
            raise ValueError("Invalid value for `days`, must not be `None`")  # noqa: E501

        self._days = days

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateSourceDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
