# coding: utf-8

"""
    timelight

    This is the timelight api.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PrevisionListDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'previsions': 'list[PrevisionDto]',
        'has_saved_previsions': 'bool'
    }

    attribute_map = {
        'previsions': 'previsions',
        'has_saved_previsions': 'hasSavedPrevisions'
    }

    def __init__(self, previsions=None, has_saved_previsions=None):  # noqa: E501
        """PrevisionListDto - a model defined in Swagger"""  # noqa: E501

        self._previsions = None
        self._has_saved_previsions = None
        self.discriminator = None

        self.previsions = previsions
        self.has_saved_previsions = has_saved_previsions

    @property
    def previsions(self):
        """Gets the previsions of this PrevisionListDto.  # noqa: E501

        List of previsions  # noqa: E501

        :return: The previsions of this PrevisionListDto.  # noqa: E501
        :rtype: list[PrevisionDto]
        """
        return self._previsions

    @previsions.setter
    def previsions(self, previsions):
        """Sets the previsions of this PrevisionListDto.

        List of previsions  # noqa: E501

        :param previsions: The previsions of this PrevisionListDto.  # noqa: E501
        :type: list[PrevisionDto]
        """
        if previsions is None:
            raise ValueError("Invalid value for `previsions`, must not be `None`")  # noqa: E501

        self._previsions = previsions

    @property
    def has_saved_previsions(self):
        """Gets the has_saved_previsions of this PrevisionListDto.  # noqa: E501

        If true, those previsions are user saved previsions and can be updated.If false, you can not update previsions, you have to save them first  # noqa: E501

        :return: The has_saved_previsions of this PrevisionListDto.  # noqa: E501
        :rtype: bool
        """
        return self._has_saved_previsions

    @has_saved_previsions.setter
    def has_saved_previsions(self, has_saved_previsions):
        """Sets the has_saved_previsions of this PrevisionListDto.

        If true, those previsions are user saved previsions and can be updated.If false, you can not update previsions, you have to save them first  # noqa: E501

        :param has_saved_previsions: The has_saved_previsions of this PrevisionListDto.  # noqa: E501
        :type: bool
        """
        if has_saved_previsions is None:
            raise ValueError("Invalid value for `has_saved_previsions`, must not be `None`")  # noqa: E501

        self._has_saved_previsions = has_saved_previsions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PrevisionListDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrevisionListDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
