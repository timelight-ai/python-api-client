# coding: utf-8

"""
    timelight

    This is the timelight api.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DayContext(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'created_date': 'str',
        'updated_date': 'str',
        'day_date': 'str',
        'source_id': 'float',
        'ctx_type': 'str',
        'activity': 'object',
        'value': 'object'
    }

    attribute_map = {
        'id': 'id',
        'created_date': 'createdDate',
        'updated_date': 'updatedDate',
        'day_date': 'dayDate',
        'source_id': 'sourceId',
        'ctx_type': 'ctxType',
        'activity': 'activity',
        'value': 'value'
    }

    def __init__(self, id=None, created_date=None, updated_date=None, day_date=None, source_id=None, ctx_type=None, activity=None, value=None):  # noqa: E501
        """DayContext - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._created_date = None
        self._updated_date = None
        self._day_date = None
        self._source_id = None
        self._ctx_type = None
        self._activity = None
        self._value = None
        self.discriminator = None

        self.id = id
        self.created_date = created_date
        self.updated_date = updated_date
        self.day_date = day_date
        self.source_id = source_id
        self.ctx_type = ctx_type
        self.activity = activity
        self.value = value

    @property
    def id(self):
        """Gets the id of this DayContext.  # noqa: E501


        :return: The id of this DayContext.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DayContext.


        :param id: The id of this DayContext.  # noqa: E501
        :type: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created_date(self):
        """Gets the created_date of this DayContext.  # noqa: E501


        :return: The created_date of this DayContext.  # noqa: E501
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this DayContext.


        :param created_date: The created_date of this DayContext.  # noqa: E501
        :type: str
        """
        if created_date is None:
            raise ValueError("Invalid value for `created_date`, must not be `None`")  # noqa: E501

        self._created_date = created_date

    @property
    def updated_date(self):
        """Gets the updated_date of this DayContext.  # noqa: E501


        :return: The updated_date of this DayContext.  # noqa: E501
        :rtype: str
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this DayContext.


        :param updated_date: The updated_date of this DayContext.  # noqa: E501
        :type: str
        """
        if updated_date is None:
            raise ValueError("Invalid value for `updated_date`, must not be `None`")  # noqa: E501

        self._updated_date = updated_date

    @property
    def day_date(self):
        """Gets the day_date of this DayContext.  # noqa: E501

        The context date in format \"yyyy-mm-dd\"  # noqa: E501

        :return: The day_date of this DayContext.  # noqa: E501
        :rtype: str
        """
        return self._day_date

    @day_date.setter
    def day_date(self, day_date):
        """Sets the day_date of this DayContext.

        The context date in format \"yyyy-mm-dd\"  # noqa: E501

        :param day_date: The day_date of this DayContext.  # noqa: E501
        :type: str
        """
        if day_date is None:
            raise ValueError("Invalid value for `day_date`, must not be `None`")  # noqa: E501

        self._day_date = day_date

    @property
    def source_id(self):
        """Gets the source_id of this DayContext.  # noqa: E501


        :return: The source_id of this DayContext.  # noqa: E501
        :rtype: float
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this DayContext.


        :param source_id: The source_id of this DayContext.  # noqa: E501
        :type: float
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")  # noqa: E501

        self._source_id = source_id

    @property
    def ctx_type(self):
        """Gets the ctx_type of this DayContext.  # noqa: E501

        Context type  # noqa: E501

        :return: The ctx_type of this DayContext.  # noqa: E501
        :rtype: str
        """
        return self._ctx_type

    @ctx_type.setter
    def ctx_type(self, ctx_type):
        """Sets the ctx_type of this DayContext.

        Context type  # noqa: E501

        :param ctx_type: The ctx_type of this DayContext.  # noqa: E501
        :type: str
        """
        if ctx_type is None:
            raise ValueError("Invalid value for `ctx_type`, must not be `None`")  # noqa: E501
        allowed_values = ["dju", "temp_max_deg", "temp_min_deg", "wind_speed_kmh", "wind_temp_deg", "rain_mm", "humidity_perc", "visibility_km", "cloud_cover_perc", "heat_idx_unit", "dew_point_deg", "pressure_hpa", "sunrise_sec", "sunset_sec", "day_length_sec", "historique_meteo_enum"]  # noqa: E501
        if ctx_type not in allowed_values:
            raise ValueError(
                "Invalid value for `ctx_type` ({0}), must be one of {1}"  # noqa: E501
                .format(ctx_type, allowed_values)
            )

        self._ctx_type = ctx_type

    @property
    def activity(self):
        """Gets the activity of this DayContext.  # noqa: E501


        :return: The activity of this DayContext.  # noqa: E501
        :rtype: object
        """
        return self._activity

    @activity.setter
    def activity(self, activity):
        """Sets the activity of this DayContext.


        :param activity: The activity of this DayContext.  # noqa: E501
        :type: object
        """
        if activity is None:
            raise ValueError("Invalid value for `activity`, must not be `None`")  # noqa: E501

        self._activity = activity

    @property
    def value(self):
        """Gets the value of this DayContext.  # noqa: E501


        :return: The value of this DayContext.  # noqa: E501
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this DayContext.


        :param value: The value of this DayContext.  # noqa: E501
        :type: object
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DayContext):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
