# coding: utf-8

"""
    timelight

    This is the timelight api.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SourceDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'name': 'str',
        'group_id': 'float',
        'group_inertia': 'float',
        'projection_x': 'float',
        'projection_y': 'float',
        'reference_year': 'float',
        'has_prevision': 'bool',
        'prevision_enabled': 'bool',
        'latitude': 'float',
        'longitude': 'float',
        'address': 'str',
        'alert_min_criticity': 'float',
        'alert_max_criticity': 'float'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'group_id': 'groupId',
        'group_inertia': 'groupInertia',
        'projection_x': 'projectionX',
        'projection_y': 'projectionY',
        'reference_year': 'referenceYear',
        'has_prevision': 'hasPrevision',
        'prevision_enabled': 'previsionEnabled',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'address': 'address',
        'alert_min_criticity': 'alertMinCriticity',
        'alert_max_criticity': 'alertMaxCriticity'
    }

    def __init__(self, id=None, name=None, group_id=None, group_inertia=None, projection_x=None, projection_y=None, reference_year=None, has_prevision=None, prevision_enabled=None, latitude=None, longitude=None, address=None, alert_min_criticity=None, alert_max_criticity=None):  # noqa: E501
        """SourceDto - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._group_id = None
        self._group_inertia = None
        self._projection_x = None
        self._projection_y = None
        self._reference_year = None
        self._has_prevision = None
        self._prevision_enabled = None
        self._latitude = None
        self._longitude = None
        self._address = None
        self._alert_min_criticity = None
        self._alert_max_criticity = None
        self.discriminator = None

        self.id = id
        self.name = name
        self.group_id = group_id
        self.group_inertia = group_inertia
        self.projection_x = projection_x
        self.projection_y = projection_y
        self.reference_year = reference_year
        self.has_prevision = has_prevision
        self.prevision_enabled = prevision_enabled
        self.latitude = latitude
        self.longitude = longitude
        self.address = address
        self.alert_min_criticity = alert_min_criticity
        self.alert_max_criticity = alert_max_criticity

    @property
    def id(self):
        """Gets the id of this SourceDto.  # noqa: E501


        :return: The id of this SourceDto.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SourceDto.


        :param id: The id of this SourceDto.  # noqa: E501
        :type: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this SourceDto.  # noqa: E501


        :return: The name of this SourceDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SourceDto.


        :param name: The name of this SourceDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def group_id(self):
        """Gets the group_id of this SourceDto.  # noqa: E501


        :return: The group_id of this SourceDto.  # noqa: E501
        :rtype: float
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this SourceDto.


        :param group_id: The group_id of this SourceDto.  # noqa: E501
        :type: float
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")  # noqa: E501

        self._group_id = group_id

    @property
    def group_inertia(self):
        """Gets the group_inertia of this SourceDto.  # noqa: E501


        :return: The group_inertia of this SourceDto.  # noqa: E501
        :rtype: float
        """
        return self._group_inertia

    @group_inertia.setter
    def group_inertia(self, group_inertia):
        """Sets the group_inertia of this SourceDto.


        :param group_inertia: The group_inertia of this SourceDto.  # noqa: E501
        :type: float
        """
        if group_inertia is None:
            raise ValueError("Invalid value for `group_inertia`, must not be `None`")  # noqa: E501

        self._group_inertia = group_inertia

    @property
    def projection_x(self):
        """Gets the projection_x of this SourceDto.  # noqa: E501


        :return: The projection_x of this SourceDto.  # noqa: E501
        :rtype: float
        """
        return self._projection_x

    @projection_x.setter
    def projection_x(self, projection_x):
        """Sets the projection_x of this SourceDto.


        :param projection_x: The projection_x of this SourceDto.  # noqa: E501
        :type: float
        """
        if projection_x is None:
            raise ValueError("Invalid value for `projection_x`, must not be `None`")  # noqa: E501

        self._projection_x = projection_x

    @property
    def projection_y(self):
        """Gets the projection_y of this SourceDto.  # noqa: E501


        :return: The projection_y of this SourceDto.  # noqa: E501
        :rtype: float
        """
        return self._projection_y

    @projection_y.setter
    def projection_y(self, projection_y):
        """Sets the projection_y of this SourceDto.


        :param projection_y: The projection_y of this SourceDto.  # noqa: E501
        :type: float
        """
        if projection_y is None:
            raise ValueError("Invalid value for `projection_y`, must not be `None`")  # noqa: E501

        self._projection_y = projection_y

    @property
    def reference_year(self):
        """Gets the reference_year of this SourceDto.  # noqa: E501


        :return: The reference_year of this SourceDto.  # noqa: E501
        :rtype: float
        """
        return self._reference_year

    @reference_year.setter
    def reference_year(self, reference_year):
        """Sets the reference_year of this SourceDto.


        :param reference_year: The reference_year of this SourceDto.  # noqa: E501
        :type: float
        """
        if reference_year is None:
            raise ValueError("Invalid value for `reference_year`, must not be `None`")  # noqa: E501

        self._reference_year = reference_year

    @property
    def has_prevision(self):
        """Gets the has_prevision of this SourceDto.  # noqa: E501


        :return: The has_prevision of this SourceDto.  # noqa: E501
        :rtype: bool
        """
        return self._has_prevision

    @has_prevision.setter
    def has_prevision(self, has_prevision):
        """Sets the has_prevision of this SourceDto.


        :param has_prevision: The has_prevision of this SourceDto.  # noqa: E501
        :type: bool
        """
        if has_prevision is None:
            raise ValueError("Invalid value for `has_prevision`, must not be `None`")  # noqa: E501

        self._has_prevision = has_prevision

    @property
    def prevision_enabled(self):
        """Gets the prevision_enabled of this SourceDto.  # noqa: E501


        :return: The prevision_enabled of this SourceDto.  # noqa: E501
        :rtype: bool
        """
        return self._prevision_enabled

    @prevision_enabled.setter
    def prevision_enabled(self, prevision_enabled):
        """Sets the prevision_enabled of this SourceDto.


        :param prevision_enabled: The prevision_enabled of this SourceDto.  # noqa: E501
        :type: bool
        """
        if prevision_enabled is None:
            raise ValueError("Invalid value for `prevision_enabled`, must not be `None`")  # noqa: E501

        self._prevision_enabled = prevision_enabled

    @property
    def latitude(self):
        """Gets the latitude of this SourceDto.  # noqa: E501


        :return: The latitude of this SourceDto.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this SourceDto.


        :param latitude: The latitude of this SourceDto.  # noqa: E501
        :type: float
        """
        if latitude is None:
            raise ValueError("Invalid value for `latitude`, must not be `None`")  # noqa: E501

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this SourceDto.  # noqa: E501


        :return: The longitude of this SourceDto.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this SourceDto.


        :param longitude: The longitude of this SourceDto.  # noqa: E501
        :type: float
        """
        if longitude is None:
            raise ValueError("Invalid value for `longitude`, must not be `None`")  # noqa: E501

        self._longitude = longitude

    @property
    def address(self):
        """Gets the address of this SourceDto.  # noqa: E501


        :return: The address of this SourceDto.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this SourceDto.


        :param address: The address of this SourceDto.  # noqa: E501
        :type: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def alert_min_criticity(self):
        """Gets the alert_min_criticity of this SourceDto.  # noqa: E501


        :return: The alert_min_criticity of this SourceDto.  # noqa: E501
        :rtype: float
        """
        return self._alert_min_criticity

    @alert_min_criticity.setter
    def alert_min_criticity(self, alert_min_criticity):
        """Sets the alert_min_criticity of this SourceDto.


        :param alert_min_criticity: The alert_min_criticity of this SourceDto.  # noqa: E501
        :type: float
        """
        if alert_min_criticity is None:
            raise ValueError("Invalid value for `alert_min_criticity`, must not be `None`")  # noqa: E501

        self._alert_min_criticity = alert_min_criticity

    @property
    def alert_max_criticity(self):
        """Gets the alert_max_criticity of this SourceDto.  # noqa: E501


        :return: The alert_max_criticity of this SourceDto.  # noqa: E501
        :rtype: float
        """
        return self._alert_max_criticity

    @alert_max_criticity.setter
    def alert_max_criticity(self, alert_max_criticity):
        """Sets the alert_max_criticity of this SourceDto.


        :param alert_max_criticity: The alert_max_criticity of this SourceDto.  # noqa: E501
        :type: float
        """
        if alert_max_criticity is None:
            raise ValueError("Invalid value for `alert_max_criticity`, must not be `None`")  # noqa: E501

        self._alert_max_criticity = alert_max_criticity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SourceDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SourceDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
